'''
ChatGPT 파이썬 숫자 설명

Python은 정수, 부동 소수점 숫자 및 복소수를 포함하여 여러 유형의 숫자를 지원합니다.


정수: 정수는 소수점이 없는 정수입니다. Python에서 정수는 양수, 음수 또는 0이 될 수 있습니다. 예: 0, 42, -100 등
부동 소수점 숫자: 부동 소수점 숫자는 소수점이 있는 숫자입니다. Python에서 부동 소수점 숫자는 float 데이터 유형을 사용하여 표현됩니다. 예: 3.14, 2.71828, -1.0 등
복소수: 복소수는 실수부와 허수부를 모두 가진 숫자입니다. 파이썬에서 복소수는 complex 데이터 유형을 사용하여 표현됩니다. 예: 2 + 3j, -1 + 2j 등

이러한 기본 유형의 숫자 ​​외에도 Python은 특수 모듈을 통해 분수 및 소수와 같은 다른 숫자 유형을 지원합니다. 이러한 유형은 정밀도 또는 반올림 문제를 처리할 때 유용할 수 있습니다.


Python에는 표현할 수 있는 숫자의 크기에도 제한이 있음을 명심하는 것이 중요합니다. 예를 들어, int 데이터 유형은 매우 크거나 매우 작은 정수를 나타낼 수 있지만 메모리에 저장할 수 있는 정수의 크기에는 제한이 있습니다. 마찬가지로 'float' 데이터 유형은 매우 크거나 작은 숫자를 나타낼 수 있지만 정밀도가 제한되어 있고 반올림 오류가 발생할 수도 있습니다.
'''

# 사칙연산
# 사칙연산 - 더하기
print(2+2)

# 사칙연산 - 빼기
print(1-2)
print(2-1)

# 사칙연산 - 곱하기
print(2*2)

# 사칙연산 - 나누기
print(5/2) # 파이썬3부터 정수끼리 나눗셈을 해도 실수로 출력됨
print(4/2)

# 나눗셈 후 소숫점 이하 버리기
# //(floor division)연산자를 사용
print(5//2)
print(4//2)

# 실수에 //연산자를 사용하면 결과는 실수가 나오고 소수점 이하는 버림
print(5.5 // 2)
print(4 // 2)
print(4.1 // 2.1)

# %(modulo) 나머지 연산자
print(5 % 2)

# ** 거듭제곱 연산자
print(2 ** 10)

# int(integer) 정수 형변환
print(int(3.3))
print(int(5/2))
print(int('10'))

# 자료형 출력
print(type(10))

# 몫과 나머지 구하기
# 튜플 형태로 리턴함
print(divmod(5,2))

# 두 변수로 나눠서 출력 가능
quotient, remainder = divmod(5, 2)
print(quotient, remainder)

'''
정수는 10진수 이외에도 2진수, 8진수, 16진수로도 표현할 수 있습니다.

2진수: 숫자 앞에 0b를 붙이며 0과 1을 사용합니다.

8진수: 숫자 앞에 0o(숫자 0과 소문자 o)를 붙이며 0부터 7까지 사용합니다.

16진수: 숫자 앞에 0x 또는 0X를 붙이며 0부터 9, A부터 F까지 사용합니다(소문자 a부터 f도 가능).
'''
print(0b110)
print(0o10)
print(0xF)

##############################
# 실수 계산하기
print(3.5 + 2.1)

# 컴퓨터에서 실수를 표현할 때 오차발생
print(4.3 - 2.7)
print(5.5 / 3.1)

# 1부터 10까지 정수는 10개이나 실수는 무한함
# 따라서 실수표현을 정확하게 할 수 없음(근사값)
print(0.1 + 0.2)

# 실수와 정수 계산시
# 실수와 정수를 함께 계산하면 표현범위가 넓은 실수로 계산됨
print(4.2 + 5)


# 두 실수 값이 같은지 판단
# https://dojang.io/mod/page/view.php?id=2466
print((0.1 + 0.2) == 0.3)

# float(floating point) 실수 형변환
print(float(5))
print(float(1 + 2))
print(float('5.3'))

# 데이터형 확인
print(type(3.5))

#복소수
'''
파이썬에서는 실수부와 허수부로 이루어진 복소수(complex number)도 사용할 수 있습니다. 이때 허수부는 숫자 뒤에 j를 붙입니다(수학에서는 허수를 i로 표현하지만 공학에서는 j를 사용합니다).
'''
print(1.2+1.3j)
print(complex(1.2, 1.3))
